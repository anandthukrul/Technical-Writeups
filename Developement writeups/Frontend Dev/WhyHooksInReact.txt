Why Hooks?

Reason set 1:
How 'this' keyword works in js
Remember to bind event handlers in class components
Classes don't minify very well and make hot reloading very unreliable
=> Avoid the whole confusion with 'this' keyword

Reason set 2:
There is no particular way to reuse stateful component logic
HOC and render props patterns do address this problem
Makes the code harder to follow
Hence there is a need to share stateful logic in a better way
=> Allow you to reuse stateful logic

Reason set 3:
Create components for complex scenarios such as data fetching and subscribing to events
Related code is not organized in one place
Eg: Data fetching - in componentDidmount and componentDidUpdate
Eg: Event listeners: in componentDidMount and componentWillUnmount
Beacuse of stateful logic - cannot break components into smaller ones
=> Organise the logic inside a component into a reusable isolated units

Noteworthy points:
React version 16.8 or higher
Not a compulsion
Hooks dont contain any breaking changes and the release is 100% backward compatible
Classes wont be removed from React.
Can't use hooks inside a class component
Hooks provide a more direct API to the React concepts you already know like props, state, context, refs and lifecycle. 
Hooks allow you to reuse stateful logic without changing your component hierarchy.

Rules to use hooks:
1. Only use hooks at Top level - Don't call hooks inside loops, conditions, or nested functions
2. Only call hooks from React functional components and not any regular JS functions.
